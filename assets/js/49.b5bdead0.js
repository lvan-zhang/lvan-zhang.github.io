(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{497:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",[e._v("js 基本数据类型")]),e._v(" "),n("p",[e._v("基本类型：String、Number、Boolean、Undefined、Null、Symbol\n引用类型：Object")]),e._v(" "),n("p",[e._v("js 对象\n本地对象")]),e._v(" "),n("p",[e._v("与宿主无关，独立于宿主环境的ECMAScript实现提供的对象。\n这些引用类型在运行过程中需要通过 new 来创建所需的实例对象。\n包含：Object、Array、Date、RegExp、Function、Boolean、Numb...")])]),e._v(" "),n("h2",{attrs:{id:"_1、bom-和-dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、bom-和-dom"}},[e._v("#")]),e._v(" 1、BOM 和 DOM")]),e._v(" "),n("div",{staticClass:"language-mermaid line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("graph TD\n    BOM--核心对象--\x3ewindow\n    window--浏览历史记录--\x3ehistory\n    window--页面URL--\x3elocation\n    window--浏览器信息--\x3enavigator\n    window--显示器屏幕--\x3escreen\n    window--框架--\x3eframes\n    window--\x3e窗口控制\n    窗口控制--\x3emoveBy,srollTo\n    window--\x3e焦点控制\n    焦点控制--\x3efocus,blur\n    window--\x3e打开关闭窗口\n    打开关闭窗口--\x3eopen,close\n    window--\x3e定时器\n    定时器--\x3esetTimeOut\n    window--\x3e对话框\n    对话框--\x3ealert\n    window--\x3edocument\n    DOM--根本对象--\x3edocument\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br")])]),n("ul",[n("li",[e._v("DOM描述了处理网页内容的方法和接口，BOM描述了与浏览器进行交互的方法和接口。")])]),e._v(" "),n("h2",{attrs:{id:"_2、js-基本数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、js-基本数据类型"}},[e._v("#")]),e._v(" 2、js 基本数据类型")]),e._v(" "),n("ul",[n("li",[e._v("基本类型：String、Number、Boolean、Undefined、Null、Symbol")]),e._v(" "),n("li",[e._v("引用类型：Object、Array、Date、RegExp、Function（统称Object）")])]),e._v(" "),n("h2",{attrs:{id:"_3、js-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、js-对象"}},[e._v("#")]),e._v(" 3、js 对象")]),e._v(" "),n("h3",{attrs:{id:"本地对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本地对象"}},[e._v("#")]),e._v(" 本地对象")]),e._v(" "),n("ul",[n("li",[e._v("与宿主无关，独立于宿主环境的ECMAScript实现提供的对象。")]),e._v(" "),n("li",[e._v("这些引用类型在运行过程中需要通过 "),n("code",[e._v("new")]),e._v(" 来创建所需的实例对象。")]),e._v(" "),n("li",[e._v("包含："),n("code",[e._v("Object")]),e._v("、"),n("code",[e._v("Array")]),e._v("、"),n("code",[e._v("Date")]),e._v("、"),n("code",[e._v("RegExp")]),e._v("、"),n("code",[e._v("Function")]),e._v("、"),n("code",[e._v("Boolean")]),e._v("、"),n("code",[e._v("Number")]),e._v("、"),n("code",[e._v("String")]),e._v(" 等。")])]),e._v(" "),n("h3",{attrs:{id:"内置对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[e._v("#")]),e._v(" 内置对象")]),e._v(" "),n("ul",[n("li",[e._v("与宿主无关，独立于宿主环境的ECMAScript实现提供的对象。")]),e._v(" "),n("li",[e._v("在 ECMAScript 程序开始执行前就存在，本身就是实例化内置对象，开发者无需再去实例化。")]),e._v(" "),n("li",[e._v("内置对象是本地对象的子集。")]),e._v(" "),n("li",[e._v("包含："),n("code",[e._v("Global")]),e._v(" 和 "),n("code",[e._v("Math")]),e._v("。")]),e._v(" "),n("li",[e._v("ECMAScript5中增添了 "),n("code",[e._v("JSON")]),e._v(" 这个存在于全局的内置对象。")])]),e._v(" "),n("blockquote",[n("p",[e._v("关于全局对象"),n("code",[e._v("Global")]),e._v("：全局对象只是一个对象，而不是类。既没有构造函数，也无法实例化一个新的全局对象。")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Global 的例子：\n属性：NaN，Infinity，Undefined\n方法：parseInt()，String()，Number()\nJSON 的例子：JSON.parse()，JSON.stringify()\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("blockquote",[n("p",[e._v("本地对象也经常被叫做原生对象或内部对象，把本地对象和内置对象统称为“内置对象”，也就是说除了宿主对象，剩下的都是ECMAScript的内部的“内置”对象。")])]),e._v(" "),n("h3",{attrs:{id:"宿主对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#宿主对象"}},[e._v("#")]),e._v(" 宿主对象")]),e._v(" "),n("ul",[n("li",[e._v("所有不是 "),n("em",[n("strong",[e._v("本地对象")])]),e._v(" 都属于宿主对象。")]),e._v(" "),n("li",[e._v("对于嵌入到网页中的JS来说，其宿主对象就是浏览器提供的对象，浏览器对象有很多，如 "),n("code",[e._v("Window")]),e._v(" 和 "),n("code",[e._v("Document")]),e._v(" 等。")]),e._v(" "),n("li",[e._v("所有的 "),n("code",[e._v("DOM")]),e._v(" 和 "),n("code",[e._v("BOM")]),e._v(" 对象都属于宿主（浏览器）对象。")])]),e._v(" "),n("h2",{attrs:{id:"_4、判断一个数据是什么类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、判断一个数据是什么类型"}},[e._v("#")]),e._v(" 4、判断一个数据是什么类型")]),e._v(" "),n("p",[e._v("typeof\n: - 判断参数是什么类型的实例，返回的结果有\n"),n("code",[e._v("number")]),e._v("、"),n("code",[e._v("string")]),e._v("、"),n("code",[e._v("boolean")]),e._v("、"),n("code",[e._v("object")]),e._v("、"),n("code",[e._v("function")]),e._v(" 和 "),n("code",[e._v("undefined")]),e._v("\n: - "),n("code",[e._v('typeof(对象，数组和null) = "object"')]),e._v("，所以就产生了一个问题，用typeof检测引用数据类型的话，都是"),n("code",[e._v("object")])]),e._v(" "),n("p",[e._v("instanceof\n: - 一个对象在其原型链中是否存在一个构造函数的 prototype 属性。\n: - 语法："),n("code",[e._v("object instanceof A")]),e._v("\n: - 沿着object的 "),n("code",[e._v("_proto_")]),e._v(" 属性这条线来找，同时沿着A的 "),n("code",[e._v("prototype")]),e._v(" 属性这条线，若果两条线能找到同一个引用，即同一个对象，则返回true。\n: ```javascript\nvar a = new Array()\nconsole.log(a instanceof Array) // true")]),e._v(" "),n("pre",[n("code",[e._v("function test(){}\nvar a = new test()\nconsole.log(a instanceof test) //true\n```\n")])]),e._v(" "),n("p",[e._v("但是，如果 "),n("code",[e._v("[] instanceof Object")]),e._v(" 也会返回 true ，因为 "),n("code",[e._v("Object")]),e._v(" 也在这条原型链上。所以还有以下方法来判断⬇️")]),e._v(" "),n("p",[e._v("constructor\n: "),n("code",[e._v("javascript \tvar o = { \t 'name':'lee' \t }; \tvar a = ['reg','blue']; \tconsole.log(o.constructor == Object); //true \tconsole.log(a.constructor == Array); //true")]),e._v("\ntoString()\n: "),n("code",[e._v("javascript \tvar o = { \t'name':'lee' }; \tvar a = ['reg','blue']; \tconsole.log(Object.prototype.toString.call(a));//[object Array] \tconsole.log(Object.prototype.toString.call(o));//[Object Object]")]),e._v("\njquery方法\n: "),n("code",[e._v("$.isPlainObject(obj)")]),e._v("\n: "),n("code",[e._v("$.isArray(obj)")]),e._v(" "),n("code",[e._v("Array.isArray(obj)")]),e._v("\n: "),n("code",[e._v("$.isFunction(obj)")])])])}),[],!1,null,null,null);t.default=s.exports}}]);