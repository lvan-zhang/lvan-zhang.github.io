(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{439:function(t,e,a){"use strict";a.r(e);var v=a(0),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[t._v("1、vue的生命周期")]),t._v(" "),a("p",[t._v("创建期间的生命周期函数：")]),t._v(" "),a("p",[t._v("beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性\ncreated：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板\nbeforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中\nmounted：此时，已经将编译好的模板，挂...")])]),t._v(" "),a("h2",{attrs:{id:"_1、vue的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、vue的生命周期"}},[t._v("#")]),t._v(" 1、vue的生命周期")]),t._v(" "),a("ul",[a("li",[t._v("创建期间的生命周期函数：")])]),t._v(" "),a("ol",[a("li",[t._v("beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性")]),t._v(" "),a("li",[t._v("created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板")]),t._v(" "),a("li",[t._v("beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中")]),t._v(" "),a("li",[t._v("mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示")])]),t._v(" "),a("ul",[a("li",[t._v("运行期间的生命周期函数：")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点")]),t._v(" "),a("li",[t._v("updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！")])]),t._v(" "),a("ul",[a("li",[t._v("销毁期间的生命周期函数：")])]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[t._v("beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。")]),t._v(" "),a("li",[t._v("destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。")])]),t._v(" "),a("h2",{attrs:{id:"_2、vue中native修饰符的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、vue中native修饰符的用法"}},[t._v("#")]),t._v(" 2、vue中native修饰符的用法")]),t._v(" "),a("h2",{attrs:{id:"_3、axios和ajax的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、axios和ajax的区别"}},[t._v("#")]),t._v(" 3、axios和ajax的区别")]),t._v(" "),a("p",[t._v("同：都是封装的XMLHttpRequest\n异：\naxios")]),t._v(" "),a("ul",[a("li",[t._v("支持 Promise API")]),t._v(" "),a("li",[t._v("客户端支持防止CSRF（就是让你的每个请求都带一个从cookie中拿到的key, 根据浏览器同源策略，假冒的网站是拿不到你cookie中得key的，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略。）")]),t._v(" "),a("li",[t._v("提供了一些并发请求的接口")])])])}),[],!1,null,null,null);e.default=_.exports}}]);